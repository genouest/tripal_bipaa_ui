<?php

/**
 * Implements hook_install().
 *
 * Performs actions when installed.
 *
 *
 */

function tripal_bipaa_ui_install() {

    // Create polypeptide entity

    $args = array(
        "vocabulary" => "SO",
        "accession" => "0000104",
        "term_name" => "polypeptide",
        "storage_args" => array(
            "data_table" => "feature",
            "type_column" => "type_id"
        )
    );

    $polypeptide_bundle = tripal_create_bundle($args);
    set_view_permissions($polypeptide_bundle);

    // TEMP: need to setup at least an alias (temp bug fix)
    // https://github.com/tripal/tripal/issues/727
    // Dict key needs to be in tripal_term

    $aliases = array(
        "organism" => "organism/[taxrank__genus]/[taxrank__species]",
        "mRNA" => "feature/[obi__organism,TAXRANK:0000005]/[obi__organism,TAXRANK:0000006]/[rdfs__type]/[data__identifier]",
        "Analysis" => "analysis/[TripalEntity__entity_id]",
        "polypeptide" => "feature/[obi__organism,TAXRANK:0000005]/[obi__organism,TAXRANK:0000006]/[rdfs__type]/[data__identifier]"
    );

    $includes = array(
      module_load_include('inc', 'tripal', 'includes/TripalBundleUIController.inc'),
    );

    foreach ( $aliases as $key => $value){
        $bundle_id = get_bundle_id($key);
        tripal_set_bundle_variable('url_format', $bundle_id, $value);
    };
    setup_alias("data_search/organism", "chado/organism");
    setup_alias("data_search/analysis", "chado/analysis");
    setup_alias("data_search/polypeptide", "chado/polypeptide");
    setup_alias("data_search/mrna", "chado/mrna");

    // Setup fields for polypeptides and mRNA
    $field_list = array(
        array(
            "wrapper_name" => "Blast",
            "wrapper_machine_name" =>"blast",
            "field_machine_name" => "format__blast_results",
        ),
        array(
            "wrapper_name" => "Expression",
            "wrapper_machine_name" =>"expression",
            "field_machine_name" => "data__gene_expression_data",
        ),
        array(
            "wrapper_name" => "Interpro",
            "wrapper_machine_name" =>"interpro",
            "field_machine_name" => "local__interpro_results",
        ),
    );

    $organism_field_list = array(
        array(
            "wrapper_name" => "GO Reports",
            "wrapper_machine_name" =>"go",
            "field_machine_name" => "local__go_results",
        ),
        array(
            "wrapper_name" => "Biomaterial Browser",
            "wrapper_machine_name" =>"biomaterials",
            "field_machine_name" => "sep__biological_sample",
        )
    );

    setup_fields("polypeptide", $field_list);
    setup_fields("mRNA", $field_list);
    setup_fields("organism", $organism_field_list);

    // Create a custom menu, to avoid unwanted modifications by other modules
    create_menu('Content Search', 'custom_search', '');
    // Get the links we want from the data search menu and add them to the new menu
    transfer_links('data_search', 'custom_search', array('mRNA Search','Polypeptide Search','Organism Search','Analysis Search'));
    // Theses blocks would be created later, but we want to place them now, so we create them beforehand
    create_block('menu', 'custom_search', 'sidebar_first', 'bartik');
    create_block('menu', 'custom_search', 'sidebar_first', 'seven');
    create_block('tripal_elasticsearch', 'elasticsearch_website_search_box', 'sidebar_first', 'bartik', -10);
    create_block('tripal_elasticsearch', 'elasticsearch_website_search_box', 'sidebar_first', 'seven', -10);

    // Disable obsolete blocks
    disable_block('navigation');
    disable_block('form');

    // Need to disable field_groups and their children
    // Hopefully these group names are not random (they are, need to use the label)..

    disable_fields_groups('organism', ['Annotations', 'Cross Reference', 'Publication', 'Relationship'], True, True);
    disable_fields_groups('mRNA',['Contact', 'Publication', 'Location on Map'], True, True);
    disable_fields_groups('polypeptide',['Contact', 'Publication', 'Location on Map'], True, True);

    //Clear cache
    menu_cache_clear_all();
};

/**
 * Implements hook_modules_enabled($modules).
 *
 * Performs actions when other modules are enabled.
 *
 *
 */

function tripal_bipaa_ui_modules_enabled($modules){
    refresh_fields("polypeptide");
    refresh_fields("mRNA");
    refresh_fields("organism");
    drupal_flush_all_caches();
};

function get_bundle_id($entity_name){

    // Get term ID from tripal_term
    // Get bundle id from tripal_bundle

    $query = db_select('public.tripal_bundle', 'tb');
    $query->join('tripal_term', 'tt', 'tt.id = tb.term_id');
    $bundle_id = $query->fields('tb', ['id'])
      ->condition('tt.name', $entity_name)
      ->execute()->fetchField();

    return $bundle_id;
};


function setup_alias($source,$path){
    $path = array(
        "source" => $source,
        "alias" => $path
    );
    path_save($path);
};

function setup_fields($entity_name, $fields_list){
    // Get the bundle ID and load it.
    $bundle_id = get_bundle_id($entity_name);
    $bundle = tripal_load_bundle_entity(array('id' => $bundle_id));
    //$term = tripal_load_term_entity(array('term_id' => $bundle->term_id));

    // Refresh fields (or it should, but depending on load order it won't. Can remove this probably
    // tripal_create_bundle_fields($bundle, $term);

    //Create an empty tripal panel for each field to insert, and add the field to it

    foreach ( $fields_list as $field_dict ){        
        tripal_ds_create_field($field_dict['wrapper_name'], $field_dict['wrapper_machine_name'], $bundle->name);
        set_panel_children($bundle->name, $field_dict['wrapper_machine_name'], $field_dict['field_machine_name']);
    };
    set_panels($bundle->name, $fields_list);

};

function set_panel_children($bundle_name, $wrapper_name, $field_name){
    // The field group unique ID
    $field_group_id = 'gp_'.$wrapper_name.'|TripalEntity|'.$bundle_name.'|default';

    $result = db_select('field_group', 'fg')
    ->fields('fg', array('data'))
    ->condition('fg.identifier', $field_group_id, '=')
    ->execute()
    ->fetchObject();

    $layout_info = unserialize($result->data);
    $layout_info["children"] = array($field_name);

    db_update('field_group')
    ->fields(array(
        'data' => serialize($layout_info),
    ))
    ->condition('field_group.identifier', $field_group_id, '=')
    ->execute();
};

function set_panels($bundle_name, $fields_list){

    // Rewrited tripal_ds_update_ds_layout
    // Fix was merge in tripal, so we should use the main function


    $ds_identifier = 'TripalEntity|'.$bundle_name.'|default';

    $result = db_select('ds_layout_settings', 'ds')
    ->fields('ds', array('settings'))
    ->condition('ds.id', $ds_identifier, '=')
    ->execute()
    ->fetchObject();

  //If the layout exists unserialize it.
    if(!empty($result)) {
        $layout_info = $result->settings;
        $layout_info = unserialize($layout_info);

        //Count the number of rows in the region and add the field to the region.
        $index = count($layout_info['regions']['right']);

        foreach ( $fields_list as $field_dict ){
            //Get full machine name
            $tripal_field = 'gp_'.$field_dict['wrapper_machine_name'];
            //Now add the tripal pane and field to the right region and field array.
            $layout_info['regions']['right'][$index] = $field_dict['field_machine_name'];
            $layout_info['fields'][$field_dict['field_machine_name']] = 'right';
            $index++;
            $layout_info['regions']['right'][$index] = $tripal_field;
            $layout_info['fields'][$tripal_field] = 'right';
            $index++;
        };

        //Update the ds_layout_settings table with the new layout info.
        db_update('ds_layout_settings')
        ->fields(array(
            'settings' => serialize($layout_info),
        ))
        ->condition('ds_layout_settings.id', $ds_identifier, '=')
        ->execute();
    };
};

function disable_fields_groups($entity_name, $field_group_list=[], $use_labels=False, $disable_children=False){
    // There is no in house function to disable fields it seems..
    // Need to revert tripal_ds_update_ds_layout
    //  Need to get children for every field_group

    // We do not know the id of the field (random number)
    // We can look into the label (which should not change..)

    $bundle_id = get_bundle_id($entity_name);
    $bundle = tripal_load_bundle_entity(array('id' => $bundle_id));
    $bundle_name = $bundle->name;

    if($use_labels){
        // We need to extract the id  : iterate on all field_groups for the entity and bundle
        $field_group_labels = array();
        $results = db_select('field_group', 'fg')
            ->fields('fg')
            ->condition('bundle', $bundle_name, '=')
            ->condition('entity_type', 'TripalEntity', '=')
            ->execute()->fetchAll();
        if($results){
            foreach ($results as $field_group) {
                $field_group_data = unserialize($field_group->data);   
                if(in_array($field_group_data["label"], $field_group_list)){
                    $field_group_labels[] = $field_group->group_name;     
                }  
            }
        }
        $field_group_list= $field_group_labels;

    }
    if($disable_children){
        $children = array();
        foreach($field_group_list as $field_group){
            // Get children for each field group
            $field_group_id = $field_group.'|TripalEntity|'.$bundle_name.'|default';

            $result = db_select('field_group', 'fg')
              ->fields('fg', array('data'))
              ->condition('fg.identifier', $field_group_id, '=')
              ->execute()
              ->fetchObject();

            if($result) {
                $layout_info = unserialize($result->data);
                $children = array_merge($children, $layout_info["children"]);
            }
        }
        if(!empty($children)){
            // Loop to get children of children (if existing)
            disable_fields_groups($entity_name, $children, False, True);
        }
        $field_group_list = array_merge($field_group_list, $children);
    }

    $ds_identifier = 'TripalEntity|'.$bundle_name.'|default';

    $result = db_select('ds_layout_settings', 'ds')
    ->fields('ds', array('settings'))
    ->condition('ds.id', $ds_identifier, '=')
    ->execute()
    ->fetchObject();

    //If the layout exists unserialize it.
    if(!empty($result)) {
        $layout_info = $result->settings;
        $layout_info = unserialize($layout_info);


        $region_array = array_diff($layout_info['regions']['right'], $field_group_list);
        $field_array = array_diff_key($layout_info['fields'], $field_group_list);

        // Need to reindex first array
        $layout_info['regions']['right'] = array_values($region_array);
        $layout_info['fields'] = $field_array;


        //Update the ds_layout_settings table with the new layout info.
        db_update('ds_layout_settings')
        ->fields(array(
            'settings' => serialize($layout_info),
        ))
        ->condition('ds_layout_settings.id', $ds_identifier, '=')
        ->execute();
    };      
}


function refresh_fields($entity_name){
    $bundle_id = get_bundle_id($entity_name);
    $bundle = tripal_load_bundle_entity(array('id' => $bundle_id));
    $term = tripal_load_term_entity(array('term_id' => $bundle->term_id));

    // Refresh fields
    tripal_create_bundle_fields($bundle, $term);
}

function set_view_permissions($bundle){
    $permissions = array("view " . $bundle->name);
    $users = array("anonymous user", "authenticated user");
    foreach ( $users as $user ){
        $role_id = user_role_load_by_name($user)->rid;
        user_role_grant_permissions($role_id, $permissions);
    };
};

function create_block($module, $block_name, $region, $theme, $weight=0){

    $result = db_select('block', 'bl')
    ->fields('bl', array('bid'))
    ->condition('bl.module', $module, '=')
    ->condition('bl.theme', $theme, '=')
    ->condition('bl.delta', $block_name, '=')
    ->execute()
    ->fetchObject();

    if(!empty($result)){
        db_insert('block')
        ->fields(array(
          'module' => $module,
          'delta' => $block_name,
          'pages' => "",
          'theme' => $theme,
          'status' => 1,
          'region' => $region,
          'weight' => $weight, 
          'cache' => -1
        ))
        ->execute();
    }

};

function disable_block($delta){
    db_update('block')
    ->fields(array(
        'status' => 0,
    ))
    ->condition('block.delta', $delta, '=')
    ->execute();
};

function create_menu($menu_name, $machine_name, $description){
    $path = 'admin/structure/menu/manage/';
    $menu = array(
        'menu_name' => $machine_name,
        'title' => $menu_name,
        'description' => $description,
    );

    $link = array();
    $link['link_title'] = $menu_name;
    $link['link_path'] = $path . $machine_name;
    $link['router_path'] = $path . '%';
    $link['module'] = 'menu';
    $link['plid'] = db_query("SELECT mlid FROM {menu_links} WHERE link_path = :link AND module = :module", array(
      ':link' => 'admin/structure/menu',
      ':module' => 'system',
    ))
    ->fetchField();
    menu_link_save($link);
    menu_save($menu);
};

function transfer_links($old_menu, $new_menu, $link_array){
    //First get the links
    $results = db_select('menu_links', 'ml')
    ->fields('ml')
    ->condition('ml.menu_name', $old_menu, '=')
    ->condition('ml.link_title', $link_array, 'IN')
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($results as $link) {
        $link['menu_name'] = $new_menu;
        $link['customized'] = 1;
        $link['options'] = unserialize($link['options']);
        menu_link_save($link);
    };
};
