<?php


/**
 * Implements install_hook().
 *
 * Performs actions when all other modules are installed (run only once).
 *
 * 
 */


function tripal_bipaa_ui_modules_enabled() {

    // Need to create the polypeptide type..

    $args = array(
        "vocabulary" => "SO",
        "accession" => "0000104",
        "term_name" => "polypeptide",
        "storage_args" => array(
            "data_table" => "feature",
            "type_column" => "type_id"
        )
    );

    tripal_create_bundle($args);

    // TEMP: need to setup at least an alias (temp bug fix)
    // https://github.com/tripal/tripal/issues/727
    // Dict key needs to be in tripal_term
    // Some links are malformed.. variable not set?

    $aliases = array(
        "organism" => "organism/[taxrank__genus]/[taxrank__species]",
        "mRNA" => "feature/[obi__organism,TAXRANK:0000005]/[obi__organism,TAXRANK:0000006]/[rdfs__type]/[schema__name]",
        "Analysis" => "analysis/[TripalEntity__entity_id]",
        "polypeptide" => "feature/[obi__organism,TAXRANK:0000005]/[obi__organism,TAXRANK:0000006]/[rdfs__type]/[schema__name]"
    );

    $includes = array(
      module_load_include('inc', 'tripal', 'includes/TripalBundleUIController.inc'),
    );

    foreach ( $aliases as $key => $value){
        $bundle_id = get_bundle_id($key);
        tripal_set_bundle_variable('url_format', $bundle_id, $value);
    };
    setup_alias("data_search/organism", "chado/organism");
    setup_alias("data_search/analysis", "chado/analysis");
    setup_alias("data_search/polypeptide", "chado/polypeptide");
    setup_alias("data_search/mrna", "chado/mrna");

    $field_list = array(
        array(
            "wrapper_name" => "Blast",
            "wrapper_machine_name" =>"blast",
            "field_machine_name" => "format__blast_results",
        ),
        array(
            "wrapper_name" => "Expression",
            "wrapper_machine_name" =>"expression",
            "field_machine_name" => "data__gene_expression_data",
        ),
        array(
            "wrapper_name" => "Interpro",
            "wrapper_machine_name" =>"interpro",
            "field_machine_name" => "local__interpro_results",
        ),
    );


    setup_fields("polypeptide", $field_list);
    setup_fields("mRNA", $field_list);

    drupal_flush_all_caches();

};


function get_bundle_id($entity_name){

    // Get term ID from tripal_term
    // Get bundle id from tripal_bundle

    $query = db_select('public.tripal_bundle', 'tb');
    $query->join('tripal_term', 'tt', 'tt.id = tb.term_id');
    $bundle_id = $query->fields('tb', ['id'])
      ->condition('tt.name', $entity_name)
      ->execute()->fetchField();

    return $bundle_id;
}


function setup_alias($source,$path){
    $path = array(
        "source" => $source,
        "alias" => $path
    );
    path_save($path);
}

function setup_fields($entity_name, $fields_list){
    // Get the bundle ID and load it.
    $bundle_id = get_bundle_id($entity_name);
    $bundle = tripal_load_bundle_entity(array('id' => $bundle_id));
    $term = tripal_load_term_entity(array('term_id' => $bundle->term_id));

    // Refresh fields
    tripal_create_bundle_fields($bundle, $term);

    //Create an empty tripal panel for each field to insert, and add the field to it

    foreach ( $fields_list as $field_dict ){        
        tripal_ds_create_field($field_dict['wrapper_name'], $field_dict['wrapper_machine_name'], $bundle->name);
        set_panel_children($bundle->name, $field_dict['wrapper_machine_name'], $field_dict['field_machine_name']);
    }
    set_panels($bundle->name, $fields_list);

}

function set_panel_children($bundle_name, $wrapper_name, $field_name){
    // The field group unique ID
    $field_group_id = 'gp_'.$wrapper_name.'|TripalEntity|'.$bundle_name.'|default';

    $result = db_select('field_group', 'fg')
    ->fields('fg', array('data'))
    ->condition('fg.identifier', $field_group_id, '=')
    ->execute()
    ->fetchObject();

    $layout_info = unserialize($result->data);
    $layout_info["children"] = array($field_name);

    db_update('field_group')
    ->fields(array(
        'data' => serialize($layout_info),
    ))
    ->condition('field_group.identifier', $field_group_id, '=')
    ->execute();
}


function set_panels($bundle_name, $fields_list){

    // Rewrited tripal_ds_update_ds_layout

    $ds_identifier = 'TripalEntity|'.$bundle_name.'|default';

    $result = db_select('ds_layout_settings', 'ds')
    ->fields('ds', array('settings'))
    ->condition('ds.id', $ds_identifier, '=')
    ->execute()
    ->fetchObject();

  //If the layout exists unserialize it.
    if(!empty($result)) {
        $layout_info = $result->settings;
        $layout_info = unserialize($layout_info);

        //Count the number of rows in the region and add the field to the region.
        $index = count($layout_info['regions']['right']);

        foreach ( $fields_list as $field_dict ){
            //Get full machine name
            $tripal_field = 'gp_'.$field_dict['wrapper_machine_name'];
            //Now add the tripal pane and field to the right region and field array.
            $layout_info['regions']['right'][$index] = $field_dict['field_machine_name'];
            $layout_info['fields'][$field_dict['field_machine_name']] = 'right';
            $index++;
            $layout_info['regions']['right'][$index] = $tripal_field;
            $layout_info['fields'][$tripal_field] = 'right';
            $index++;
        }

        //Update the ds_layout_settings table with the new layout info.
        db_update('ds_layout_settings')
        ->fields(array(
            'settings' => serialize($layout_info),
        ))
        ->condition('ds_layout_settings.id', $ds_identifier, '=')
        ->execute();
    }
}

